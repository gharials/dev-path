{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"A to be developer's path","text":""},{"location":"#overview","title":"Overview","text":"<ul> <li>Programming &amp; Problem Solving - Introduces the logical and mathematical foundations of programming, problem solving, and algorithm design. It covers basic programming concepts and problem-solving techniques.</li> <li>Internet and Web - Gives an overview of how the internet works, how web pages are served, and how to build basic web pages. Prepares the ground for learning web development.</li> </ul>"},{"location":"#instructions","title":"Instructions","text":"<p>The topics covered in these pages are not meant to be comprehensive at all. Rather, they are more of an inspiration for further study. It is highly recommended that you supplement your knowledge of the topics with your own research and experiments.</p>"},{"location":"vcs-git/","title":"Version Controlling with Git","text":"<p>Starting with only a few files, a project may eventually grow into a large number of files, and a file may go through a long sequence of changes. As the number of files grows in a project, keeping track of their changes becomes increasingly difficult for developers. A version control system (VCS) is a tool that keeps track of the changes in files. Git is by far the most popular VCS used by developers, though there are a few more, like Mercurial, Subversion, etc.</p> <p>Git serves two major purposes for developers and teams: history tracking and collaboration. When a developer works on a project for a long period, it is difficult for him/her to memorize the changes the project files have gone through. Git preserves the file histories as commits. It helps developers go through a file's history or the entire repository's history whenever necessary.</p> <p>Any complex project requires team collaboration. When a team of developers works together on the same project, there must be some means to keep their work in sync among themselves. Git serves this purpose with Git remotes, a central Git repository. Developers finish their tasks on their local repositories and push their changes to the remote repository when they are done so that other developers can pull their changes into their local repositories.</p> <p>See these pages for a more exhaustive and authoritative treatment of Git.</p>"},{"location":"vcs-git/#basic-git-concepts","title":"Basic Git concepts","text":""},{"location":"vcs-git/#repository","title":"Repository","text":"<p>A directory to be watched for changes by Git is called a repository. Git monitors the repository directory for changes and records the change history as commits.</p>"},{"location":"vcs-git/#commits","title":"Commits","text":"<p>Ordinarily, we start a project in an empty directory, and over time it goes through changes. At any instant, we only have the latest state of the directory, but we don't any record of the changes it has gone through. In a Git repository, Git records the changes, and each unit of change recorded by Git is called a commit.</p> <p>While working in a repository, the repository user chooses the changes to be recorded, called staging. After that, the user asks Git to record the staged changes, called committing. Each commit has its automatically generated unique ID. The latest commit is also identified by its alias, <code>HEAD</code>. The sequence of commits of a branch in a repository shows the changes the repository has gone through, known as the commit history of the branch.</p>"},{"location":"vcs-git/#branches","title":"Branches","text":"<p>While working on a project, developers often need to work on a new feature without affecting the existing code. In such situations, without a repository, developers would have to create a copy of the project directory, and start working there. Also, whenever they want to work on the existing code, they would have to switch back to the original directory.</p> <p>Git simplifies this process with branches. A branch is a copy of the repository with its own commit history. You can create new branches and switch between them. Whenever you want to work on a different branch, Git brings the branch copy into your working directory. This is called checking out a branch.</p> <p>Each branch has its own unique name. At any time, your working directory points to a branch. The default branch, the initial copy of the repository, is called <code>master</code>.</p> Warning <p>The new <code>main</code> and the old <code>master</code> branches in GitHub</p> <p>A Git repository starts with an initial or default branch called <code>master</code>. But due to some cultural controversies with the name master, GitHub has adopted a new convention: when you create a new repository in GitHub, its default branch is <code>main</code> instead of the old <code>master</code>.</p> <p>But the default branch name is still <code>master</code> when you create a local repository with the Git desktop client (with the <code>git init</code> command). So, as GitHub has renamed its default branch name to <code>main</code>, you have a problem when you add a GitHub repository as its remote: when you push to GitHub, changes are pushed to the <code>master</code> branch instead of the <code>main</code> branch. As a remedy, you can rename your local <code>master</code> branch to <code>main</code> before adding remote or pushing: <code>git branch -m main</code>.</p>"},{"location":"vcs-git/#remotes","title":"Remotes","text":"<p>A Git remote is a server that contains a copy of a Git repository, including all of its branches, commits, and files. After working on a local repository, you can push your changes to a remote periodically so that other developers can access your changes. Similarly, you can pull changes from a remote repository to keep your local repository up to date with the latest changes made by others.</p> <p>Git remotes has two main benefits:</p> <ul> <li>Backup. If your computer crashes, you can always recover your work from the remote repository.</li> <li>Collaboration. If you are working in a team, you can share your changes with your teammates by pushing to the remote repository.</li> </ul>"},{"location":"vcs-git/#the-git-workflow","title":"The Git workflow","text":"<p>This section gives an overview of how Git is used by developers. Before using Git on your computer, download and install it.</p>"},{"location":"vcs-git/#creating-a-local-git-repository","title":"Creating a local Git repository","text":"<p>You can turn any directory on your computer into a Git repository. In order to do so, open Git Bash in an existing directory or in a newly created one, and run the <code>git init</code> command. This command creates a <code>.git</code> subdirectory into the directory. As a result, the directory turns into a Git repository with <code>master</code> as the default branch.</p> <p>After creating a repository, you have to set your user name and email address with the following commands. The username and email address tell Git it is you who is working in the repository and they are associated with your commits.</p> <pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"youremail@yourdomain.com\"\n</code></pre> Info <p>The <code>--global</code> flag in the <code>git config</code> command</p> <p>The <code>--global</code> flag in the <code>git config</code> command is optional. If you set the flag, the options you are setting become global in your computer; that is, all the repositories you create in the future on your computer use these config values (e.g. username and email address); you don't need to set them again. See this resource for a detailed discussion.</p> <p>After setting the username and email address, you have a working local repository. You can start working in your repository: staging, committing, etc.</p> Info <p>The <code>.git</code> subdirectory</p> <p>The <code>.git</code> subdirectory is used by Git for repository management; users never need to view or modify the contents in it. If you delete the <code>.git</code> subdirectory, even if keeping the other contents in it intact, your directory no longer remains a Git repository: all Git repository information about the directory will be lost and Git commands will no longer work in the directory.</p>"},{"location":"vcs-git/#git-ignore","title":"Git ignore","text":"<p>Git continually tracks every file and directories under its repository directory. If a file is already tracked (staged once with the <code>git add</code> command), it tracks the changes that took place within it; it treats other files and directories as untracked and assumes they will be tracked eventually.</p> <p>However, in a repository, some files' and directories' histories are neither important nor of any interest to the collaborators, thus they do not deserve versioning. Still, Git keeps treating them as untracked, causing confusion to developers when they want to check for changes before committing. Developers are overwhelmed by the list of untracked files, and they might stage unwanted files and commit them by mistake. The repository user has to mark such files and directories as to be ignored in a file called <code>.gitignore</code>, usually at the repository root. Here follows an example Git ignore file.</p> <pre><code>node_modules/ (1)\nsome-file.txt (2)\nsome-dir/sub-dir/another-file.txt (3)\n*.png (4)\n</code></pre> <ol> <li>Ignore the <code>node_modules</code> subdirectory, all files and sub-directories within it.</li> <li>Ignore the specific file <code>some-file.txt</code> at the project root.</li> <li>Ignore the specific file <code>another-file.txt</code> in the <code>some-dir/sub-dir/</code> subdirectory.</li> <li>Ignore all <code>png</code> files in the repository.</li> </ol> <p>Consult this resource for further details on Git ignore.</p>"},{"location":"vcs-git/#working-with-branches","title":"Working with branches","text":"<p>A new branch is created with the <code>git branch &lt;branch-name&gt;</code> command. A new branch starts from the current commit of the current branch. Therefore, the new branch and its source branch have a common history up to the branch creation commit. Creating a branch is like copying the working directory to a new location and starting to work there. Branches are usually merged back into their source branches eventually.</p> <p>Switching between different branches is done with the <code>git checkout &lt;branch-name&gt;</code> command. Git brings the working directory to the state of the branch you switched to. Conceptually, it is like Git keeps copies of the repository in branches, and when you switch branches, it brings the copy of the branch you switched to into the working directory.</p> <p>In the following example diagram, a branch called <code>feature</code> is created from the <code>main</code> branch, which conceptually copies the working directory to a new location. After that, some commits are made in the new branch, meaning the changes are made in the copied working directory, whereas the <code>main</code> branch remains unchanged. If you switch back to the <code>main</code> branch, the working directory is brought back to the state of the <code>main</code> branch, which does not include the changes made in the <code>feature</code> branch. </p> <pre><code>gitGraph\n   commit id: \"Initial commit\"\n   commit id: \"Main work\"\n   branch feature\n   checkout feature\n   commit id: \"Feature work 1\"\n   commit id: \"Feature work 2\"</code></pre>"},{"location":"vcs-git/#working-with-remotes","title":"Working with remotes","text":"<p>The changes you make in your repository, that is your commits, remain local in your computer until you push them to a remote, a shared central repository. We can either start by creating a local repository first and then associating it with a remote, or we can clone an existing remote repository.</p>"},{"location":"vcs-git/#setting-up-git-remotes-in-local-repositories","title":"Setting up Git remotes in local repositories","text":"<p>For repositories without an existing remote, you have to create a remote repository first in GitHub or in any other such provider (e.g. GitLab, Bitbucket, etc.) After creating the repository in GitHub, copy its link and associate it as a remote in your local repository with the following command:</p> <pre><code>git remote add origin(1) https://github.com/OWNER/REPOSITORY.git(2)\n</code></pre> <ol> <li>Name of the remote. A local repository may have multiple remotes with their unique names; the default remote name is <code>origin</code>.</li> <li>Link to the remote repository. You can find it in the repository webpage.</li> </ol> <p>After associating a remote with your local repository, whenever you push your commits to the remote, your changes become visible to other users who have access to the same remote repository.</p> <p>You don't need to associate your repository with a remote if you never want to share your work with others.</p>"},{"location":"vcs-git/#creating-local-repositories-with-git-clone","title":"Creating local repositories with Git clone","text":"<p>Sometimes, you may want to work on a remote repository already created by someone else. In that scenario, you can copy the remote repository into your computer with the Git clone command and start working in it.</p> <pre><code>git clone https://github.com/github/training-kit.git\n</code></pre> <p>This command creates a copy or clone of the remote repository in your computer. It also automatically sets the remote repository as the <code>origin</code> remote; you don't need to do it manually.</p>"},{"location":"building-softwares/react-js/","title":"React JS","text":"<p>Info</p> <p>Have a look at the How Web Pages Work article as a prerequisite to this article.</p> <p>Generating HTML using JavaScript functions demo.</p> <p>Components instead of a large single HTML file. JavaScript functions generating parts of the HTML document.</p>"},{"location":"building-softwares/react-js/#components","title":"Components","text":""},{"location":"building-softwares/react-js/#jsx","title":"JSX","text":"<p>React uses JSX, a syntax extension that allows writing HTML-like code within JavaScript. JSX makes it easier to visualize the UI structure and is transformed into JavaScript function calls.</p> <p>JavaScript expression can be embedded in JSX using curly braces <code>{}</code>.</p> <pre><code>import React from 'react';\n\nfunction App() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Hello, World!&lt;/h1&gt;\n      &lt;p&gt;This is a simple React component.&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"building-softwares/react-js/#component-functions","title":"Component functions","text":"<p>Functions returning JSX are called components.</p>"},{"location":"building-softwares/react-js/#props","title":"Props","text":"<p>Parameterized components. Making components reusable.</p> <p>Just as parameterized functions allow them to be used for different inputs, components with props also allow them to be used for different data.</p> <p>Props are passed to components as attributes in JSX.</p> <pre><code>import React from 'react';\n\nfunction Greeting(props) { // can also use destructuring: ({ name })\n  return &lt;h1&gt;Hello, {props.name}!&lt;/h1&gt;;\n}\n\nfunction App() {\n  return (\n    &lt;div&gt;\n      &lt;Greeting name=\"Alice\" /&gt;\n      &lt;Greeting name=\"Bob\" /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"building-softwares/react-js/#hooks","title":"Hooks","text":""},{"location":"building-softwares/react-js/#state-variables","title":"State variables","text":"<p>Trigger re-renders when changed.</p> <pre><code>import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;You clicked {count} times&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n        Click me\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"building-softwares/react-js/#ref-variables","title":"Ref variables","text":"<p>Doesn't trigger re-renders when changed, but lives across re-renders. </p> <pre><code>import React, { useRef } from 'react';\n\nfunction Timer() {\n  const countRef = useRef(0);\n\n  const handleClick = () =&gt; {\n    countRef.current += 1;\n    console.log(`Button clicked ${countRef.current} times`);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;button onClick={handleClick}&gt;\n        Click me\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"building-softwares/react-js/#effects","title":"Effects","text":"<p>Effects allow you to perform side effects in function components, such as data fetching, subscriptions, or manually changing the DOM. They run after the render phase.</p> <pre><code>import React, { useEffect } from 'react';\n\nfunction Timer() {\n  useEffect(() =&gt; {\n    const timer = setInterval(() =&gt; {\n      console.log('Timer tick');\n    }, 1000);\n\n    return () =&gt; clearInterval(timer); // Cleanup on unmount\n  }, []); // Empty dependency array means this effect runs once\n\n  return &lt;div&gt;Timer is running&lt;/div&gt;;\n}\n</code></pre>"},{"location":"building-softwares/react-js/#routing","title":"Routing","text":"<p>Some components are associated with specific URLs, allowing navigation between different views in a single-page application (SPA). React Router is a popular library for handling routing in React applications.</p> <pre><code>import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nfunction Home() {\n  return &lt;h2&gt;Home&lt;/h2&gt;;\n}\n\nfunction About() {\n  return &lt;h2&gt;About&lt;/h2&gt;;\n}\n\nfunction App() {\n  return (\n    &lt;Router&gt;\n      &lt;Switch&gt;\n        &lt;Route path=\"/about\" component={About} /&gt;\n        &lt;Route path=\"/\" component={Home} /&gt;\n      &lt;/Switch&gt;\n    &lt;/Router&gt;\n  );\n}\nexport default App;\n</code></pre>"},{"location":"building-softwares/react-js/#client-side-rendering-csr-and-server-side-rendering-ssr","title":"Client-side Rendering (CSR) and Server-side Rendering (SSR)","text":""},{"location":"building-softwares/web-applications/","title":"Web Applications","text":"<p>Info</p> <p>Have a look at the How Websites Work article as prerequisites to this article.</p>"},{"location":"building-softwares/web-applications/#web-application-architecture","title":"Web Application Architecture","text":"<p>Architecture means how the various components of an application are organized and how they interact with each other. An web application consists of the following components: client, server, and database.</p> <p></p> <p>The preceding diagram shows the diagram of a sample web application.</p>"},{"location":"internet-web/http-in-depth/","title":"Working with HTTP","text":"<p>There are two basic components in the HTTP protocol: a server and some clients. Clients send requests to a server and the server returns responses. See this resource for understanding the request-response flow in detail.</p>"},{"location":"internet-web/http-in-depth/#fundamental-http-concepts","title":"Fundamental HTTP concepts","text":"<p>The following subsections cover the concepts necessary to get started working with HTTP.</p>"},{"location":"internet-web/http-in-depth/#urls","title":"URLs","text":"<p>URLs are used to identify a web server and access its resources. Here is how a URL look like:</p> <p><code>http://www.example.com(1):80(2)/path/to/myfile.html?(3)key1=value1&amp;key2=value2#(4)SomewhereInTheDocument</code></p> <ol> <li>Host name: <code>www.example.com</code> (can be an IP address too).</li> <li>Port number: <code>:80</code> (optional; assumed to be <code>80</code> unless specified otherwise).</li> <li>Query parameter start indicator: <code>?</code> (optional; indicates that there are a few query parameters following it in key value format and separated by <code>&amp;</code>).</li> <li>Fragment indicator:  <code>#</code> (optional; text following it specifies the section in a web page).</li> </ol> <p>URLs cannot contain any spaces. See this resource for further details.</p>"},{"location":"internet-web/http-in-depth/#requests-and-responses","title":"Requests and responses","text":"<p>Generally, HTTP requests and responses consists of some headers followed by a body. Request and response bodies maybe empty depending on requests or responses.</p> <p>Here follows a representative example of an HTTP request:</p> <pre><code>GET / HTTP/1.1\nHost: developer.mozilla.org\nAccept-Language: fr\n</code></pre> <p>Here follows a representative example of an HTTP response:</p> <pre><code>HTTP/1.1 200 OK\nDate: Sat, 09 Oct 2010 14:28:02 GMT\nServer: Apache\nLast-Modified: Tue, 01 Dec 2009 20:18:22 GMT\nETag: \"51142bc1-7449-479b075b2891b\"\nAccept-Ranges: bytes\nContent-Length: 29769\nContent-Type: text/html\n\n&lt;!doctype html&gt;\u2026 (here come the 29769 bytes of the requested web page)\n</code></pre>"},{"location":"internet-web/http-in-depth/#request-methods","title":"Request methods","text":"<p>Each HTTP request follows a method. Notice in the sample request that the first line contains the request method (<code>GET</code> in that case). The most commonly used request methods are the following: <code>GET</code>, <code>POST</code>, <code>PUT</code>, and <code>DELETE</code>.</p> <p>Info</p> <p>Requests made from the browser address bars are always <code>GET</code> requests. Tools like curl or Postman lets you choose the request method.</p>"},{"location":"internet-web/http-in-depth/#status-codes","title":"Status codes","text":"<p>Each HTTP response contains a status code, indicating the status of the operation---whether the operation succeeded, failed, or anything else. At the same time, status codes also serve as instructions for clients. Notice in the sample response that the first line contains the status code (<code>200</code> in that case).</p>"},{"location":"internet-web/http-in-depth/#the-standard-status-codes","title":"The standard status codes","text":"<p>An HTTP server can return any arbitrary number as a status code. There is, however, a standardized list of status codes recognized by all standard clients (e.g., browsers). They are three-digits in length and are organized thematically into classes according to their first digits. Each status code has its own distinct meaning and purpose. See this resource for an exhaustive list of HTTP status codes with their descriptions.</p> <p>Among the status classes, <code>2xx</code>, <code>4xx</code>, and <code>5xx</code> appear more frequently in practice. The <code>2xx</code> class indicates that the server has successfully processed the request, where <code>4xx</code> and <code>5xx</code> indicate a failure in processing. Commonly used status codes are <code>200</code>, <code>304</code>, <code>404</code>, <code>500</code>, etc.</p>"},{"location":"internet-web/http-in-depth/#headers","title":"Headers","text":"<p>HTTP requests and responses contain a number of headers. They follow this general key-value format: <code>Header-name: value</code>. Headers may vary per request and response. They serve as metadata or directives (instructions) either for the client or the server. For example, the <code>Content-Type</code> header in HTTP responses tells the client how to treat the response body.</p> <p>Info</p> <p>An HTTP response sent by a server may contain any kind of data. Then how does a browser understand its format? The <code>content-type: text/html</code> header tells browsers that the content is an HTML page and browsers render it. A programmer can fool a browser by sending an HTML page with a different content type, like <code>content-type: text/plain</code>. In that case, the browser will not render the page as HTML but will display it as plain text.</p>"},{"location":"internet-web/http-in-depth/#cookies","title":"Cookies","text":"<p>A special HTTP header named <code>Set-Cookie</code> is called a cookie. If a server returns a cookie in a response (e.g., <code>Set-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;</code>), the client stores the cookie value locally. After that, in all subsequent requests to the server, the client includes the locally stored cookie value automatically as the <code>Cookie</code> header (e.g., <code>Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;</code>). In summary, cookies allow a server to pass some data to clients and get that data back from them each time.</p> <p>A server forgets about requests and the hosts they came from after returning a response (that is why the HTTP protocol is called stateless). A server can never tell from a series of requests it received whether they came from (originate) the same client or not. In other words, servers cannot identify a client. Cookies provide a commonly used means for servers to identify clients: a server sends distinct numbers as cookies to different clients and checks the cookie value in all requests.</p> <p>Cookies have other useful applications too.</p>"},{"location":"internet-web/network-internet-basics/","title":"Networking and Internet Basics","text":"<p>Computers in isolation has limited capability. When they are networked (i.e. able to transfer data among each other) their capabilities multiply. Most commonly they can share data among each other.</p> <p>Network is ubiquitous in computers these days. A sound grasp of how the Internet and Web works is important for any software developer.</p>"},{"location":"internet-web/network-internet-basics/#network-and-the-internet","title":"Network and the Internet","text":""},{"location":"internet-web/network-internet-basics/#identifying-computers-in-a-network","title":"Identifying computers in a network","text":"<p>Each device connected to a network (e.g. computers, smart phones, routers, cameras, etc.) is uniquely identified with its IP address. Devices connected to a network are called hosts or nodes in networking terminology.</p> <p>There are two variants of IP address: the traditional and most widely used IPv4 addresses and its upgrade IPv6 addresses.</p> Variant Example IPv4 <code>10.195.66.1</code> IPv6 <code>fe80::9f01:3291:9a7f:aa4a%54</code> <p>As the preceding example shows, an IPv4 address consists of four parts separated by a dot; each part can have a value up to 255. As the type and number of devices connected to the Internet kept growing, the IPv4 address space got exhausted. IPv6 was introduced as a result to accommodate even more devices. Each device has an IPv6 address as well as its IPv4 address. However, for most practical purposes developers talk in terms of IPv4 addresses.</p> <p>Hands-on</p> <p>You can find your computer's IP address by running the <code>ipconfig</code> command. Here follows an example:</p> <pre><code>PS C:\\Users\\user_name&gt; ipconfig\nWindows IP Configuration\n\n... ...\n\nWireless LAN adapter Wi-Fi:\n\n  Connection-specific DNS Suffix  . :\n  IPv4 Address. . . . . . . . . . . : 192.168.0.156\n  Subnet Mask . . . . . . . . . . . : 255.255.255.0\n  Default Gateway . . . . . . . . . : 192.168.0.1\n</code></pre> <p>Info</p> <p>Loopback address</p> <p>In a network a computer's IP address is used whenever it is referred by another computer (say for sending a request to an HTTP server running on the computer). But when a computer needs to refer itself (say for sending requests to a server running on the same computer), a special IP address and host name is used, called the loopback: the loopback address is <code>127.0.0.1</code> and the loopback hostname is <code>localhost</code>.</p>"},{"location":"internet-web/network-internet-basics/#how-ip-addresses-are-assigned","title":"How IP addresses are assigned","text":"<p>Usually a network router automatically assigns IP addresses to the hosts immediately after they are connected to its network using a protocol called DHCP (Dynamic Host Configuration Protocol). Though it is straightforward as users don't have to configure IP addresses themselves, but this approach has a drawback: the IP addresses are temporary; a device may not have the same IP address the next time it connects to the network.</p> <p>All operating systems allow users to assign static IP addresses of their choice manually. In Windows, you can do it from the Network Operations Center. See this article for instructions.</p>"},{"location":"internet-web/network-internet-basics/#locating-a-computer-in-a-network-routing","title":"Locating a computer in a network (routing)","text":"<p>In a network not all hosts (computers) are connected directly to each other; a host usually needs to reach another host via a number of intermediate hosts, called hops in networking terminology; each intermediate host relays the data sent by the original host. Before exchanging data with another host in a network, the destination host has to be located in the network and a route, consisting of intermediate hosts or hops, has to be found between them; the process is called routing.</p> <p>Info</p> <p>You can print the route between your host and another with the <code>tracert</code> (trace route) command. Here follows an example that lists the hops to reach <code>google.com</code>:</p> <pre><code>PS C:\\Users\\user_name&gt; tracert google.com\n\nTracing route to google.com [74.125.68.102]\nover a maximum of 30 hops:\n\n  1     1 ms     2 ms     1 ms  192.168.0.1\n  2     5 ms     2 ms     4 ms  10.195.66.1\n  3     8 ms     4 ms     3 ms  10.20.242.41\n  4     9 ms     1 ms     1 ms  100.64.171.53\n  5     6 ms     5 ms     5 ms  10.20.105.5\n  6     9 ms     9 ms     5 ms  10.10.100.89\n  7     7 ms     6 ms     9 ms  10.14.14.45\n  8    14 ms     8 ms    10 ms  103.26.244.34.summitgw.net [103.26.244.34]\n  9    39 ms    36 ms    36 ms  74.125.32.222\n10    38 ms    39 ms    37 ms  142.251.77.187\n11    36 ms    39 ms    37 ms  142.251.255.56\n12    58 ms    56 ms    56 ms  192.178.242.79\n13    91 ms    87 ms    88 ms  72.14.239.151\n14    89 ms    88 ms    89 ms  142.251.252.45\n15    89 ms    87 ms    88 ms  216.239.35.167\n16     *        *        *     Request timed out.\n17     *        *        *     Request timed out.\n18     *        *        *     Request timed out.\n19     *        *        *     Request timed out.\n20     *        *        *     Request timed out.\n21     *        *        *     Request timed out.\n22     *        *        *     Request timed out.\n23     *        *        *     Request timed out.\n24     *        *        *     Request timed out.\n25    84 ms    85 ms   101 ms  sc-in-f102.1e100.net [74.125.68.102]\n</code></pre>"},{"location":"internet-web/network-internet-basics/#dns-servers","title":"DNS servers","text":"<p>A DNS server maps a URL to an IP address.</p>"},{"location":"internet-web/network-internet-basics/#virtual-private-network-vpn","title":"Virtual Private Network (VPN)","text":"<p>To be done.</p>"},{"location":"internet-web/network-internet-basics/#network-protocols","title":"Network protocols","text":"<p>Communication between two hosts in a network is a complex process, spanning across several layers. Each layer's operations cannot be arbitrary; they defined by some rules or conventions and they are called protocols. The lower layers take care of identifying hosts, finding routes between them, etc. and their corresponding protocols define the rules for them.</p> <p>Info</p> <p>The canonical model for the network layers is called the OSI model and it consists of 7 layers. See the following resources for further information on OSI model:</p> <ol> <li>What is layer 7 of the Internet? - Cloudflare.</li> <li>What is the OSI Model? 7 layers explained in detail.</li> </ol> <p>Once the lower layers take care of locating and connecting hosts, then comes the question of exchanging data among the applications or programs running on the hosts. The topmost layer protocols define the rules for communication between applications running on two hosts, thus the layer is called application layer. There are many application layer protocols used by various applications. Here follows a few commonly used ones:</p> Name Purpose Applications HTTP (Hyper Text Transfer Protocol) Exchanging hyper texts (web pages.) HTTP clients (e.g. web browsers) and HTTP servers. FTP (File Transfer Protocol) Transferring files among computers. FTP clients and servers. SSH (Secured Shell) Sending commands to another computer in a network. Command line interfaces. SMTP (Simple Mail Transfer Protocol) Sending and receiving emails. Email clients and servers. <p>So whenever an application (e.g. a web browser) wants to send data to another application (e.g. a web server) in a destination host the following process take place:</p> <ol> <li>The application encodes the data according to its protocol rules (e.g. HTTP) and delegate the data to the lower layers.</li> <li>The lower layers locate the destination host, find a route to it, and transfer the data.</li> <li>The target application in the destination receives the data from the lower layers and interprets it.</li> </ol>"},{"location":"internet-web/network-internet-basics/#the-http-protocol","title":"The HTTP protocol","text":"<p>Here follows a brief introduction to arguably the most important protocol for developers, that is HTTP protocol. Just like any other protocols, HTTP protocol is an agreement across computers on how they communicate with each other.</p> <p>HTTP is a very widely used protocol and it is very straightforward. An client sends a request to a server; the server responds by sending a response. Both HTTP requests and responses are chunks of text that comply with the format defined by the HTTP protocol.</p> <p>Here follows a sample HTTP request:</p> <pre><code>&gt; GET / HTTP/2\n&gt; Host: squidfunk.github.io\n&gt; user-agent: curl/7.68.0\n&gt; accept: */*\n&gt;\n</code></pre> <p>Here follows a sample HTTP response (truncated for brevity):</p> <pre><code>&lt; HTTP/2 404\n&lt; server: GitHub.com\n&lt; content-type: text/html; charset=utf-8\n&lt; permissions-policy: interest-cohort=()\n&lt; etag: \"66faf066-239b\"\n&lt; content-security-policy: default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'\n&lt; x-github-request-id: 10F5:828B2:2098D6:2375FD:6706D2E2\n&lt; accept-ranges: bytes\n&lt; age: 0\n&lt; date: Wed, 09 Oct 2024 19:00:50 GMT\n&lt; via: 1.1 varnish\n&lt; x-served-by: cache-qpg1281-QPG\n&lt; x-cache: MISS\n&lt; x-cache-hits: 0\n&lt; x-timer: S1728500451.655837,VS0,VE227\n&lt; vary: Accept-Encoding\n&lt; x-fastly-request-id: 335b9c29f98a9efccc02baf27f1f85956b479cef\n&lt; content-length: 9115\n&lt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n</code></pre> <p>See the following resources for a more detailed overview of HTTP:</p> <ol> <li>An overview of HTTP - MDN.</li> <li>What is HTTP? - Cloudflare.</li> </ol> <p>Hands-on</p> <p>SMTP protocol message format</p> <p>Just like browsers render HTTP protocol responses in a human readable format, the SMTP clients also do the same for SMTP messages. You can view the SMTP data format by opening an email in your GMail inbox and clicking Show original from the menu at the top-right corner. Here follows an example (truncated for brevity.)</p> <pre><code>    Delivered-To: xyz@gmail.com\n    Received: by 2002:a05:7301:1295:b0:143:a58e:7c2 with SMTP id li21csp1060487dyb;\n            Wed, 9 Oct 2024 07:38:48 -0700 (PDT)\n    X-Google-Smtp-Source: AGHT+IF0EsEGjnTjO1OQSvXexSVk0cXsi6tXAtMi9OvnqD4W48BpVZvJ9jhtjZcV/omRJuSVe2ix\n    X-Received: by 2002:a05:6808:1918:b0:3e3:9ba3:5ca5 with SMTP id 5614622812f47-3e3e66b83cbmr2574514b6e.4.1728484727789;\n            Wed, 09 Oct 2024 07:38:47 -0700 (PDT)\n    ARC-Seal: i=1; a=rsa-sha256; t=1728484727; cv=none;\n            d=google.com; s=arc-20240605;\n            b=V0sGpNclrHonaLsSo0xoUXlEwDcdzbeNvW4EibEwotDLMFSgRwfb0AyK7GL9Nu7v2A\n             oqphKbv6+3WikWFgoIaBvF414W6qEQSNAz7O4lMePge8Jb4dEgjqzlAURXfUtrtsC9tx\n             BazNgxsABLDrbkRx6WXCiXsMJ0vBpGyIOrxeJ9QSv6cQxLQnbdt/RnuqCHfVcqVrymZd\n             8kL693/jYWcNg/PaHnmQOC114OWskO4LghCYsodCNMvVfzs1wMwyaWI3imJoXYyzPwJO\n             f1e//S4RnxNRdNQrYxm6HNcI2A6AQR47JZy5NTF6KfYXP8ny2kon2qO6GTT7851b+lNs\n             qmJQ==\n    ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20240605;\n            h=require-recipient-valid-since:feedback-id:list-unsubscribe-post\n             :list-unsubscribe:date:to:mime-version:subject:message-id:from\n             :dkim-signature:dkim-signature;\n            bh=4I8kyeWK9z0QNSWoIxvIg13pExRhwI9CyWfOtW5ILnY=;\n            fh=CO2obA5JRueXe+/8D0Bn8bvfiXWnfEzdHxRLiyhFm+8=;\n            b=kwe2HuwvHGBbJFykARio8/vCB/BUDbs8Ngl7GuD+x9FtCbQWDnVcxLC8nC2kJH4NnO\n             nlRRH0NEANHoIV3TsFd9uGOLWtyWFIBv3dRyzu9RT5MijWzmo9glCx/pNp59UK04ivyg\n             uOhkYC33iAyXQ2TE0KO2y0sigdu5a5Xt3Q4LT92ZhP7cHbDPLPg17Ey3w96K2TOiFSor\n             y98JQTlLs+GaNUVfhAgd3rhCJ5q5A7CG6NaRJ1RTxgNoS/9I/YwA6pbeIMtD6S4kpAvB\n             QbR5bCpmAChkkwEgF6Qo8lyXha8MaKA7m0/w25qzWy9GIhtIBVFHALVXWYBEnEACDcVD\n             EeJw==;\n            dara=google.com\n    ARC-Authentication-Results: i=1; mx.google.com;\n           dkim=pass header.i=@maile.linkedin.com header.s=d2048-202308-0e header.b=rxdH9Gey;\n           dkim=pass header.i=@linkedin.com header.s=d2048-202308-00 header.b=\"T1v+/v9R\";\n           spf=pass (google.com: domain of m-723o1y6u5nc3q4w91izccdjanxjjmqr07listkcmsu7kfb4qd6losn0mer7@bounce.linkedin.com designates 2620:109:c003:104::202 as permitted sender) smtp.mailfrom=m-723o1y6u5nc3q4w91izccdjanxjjmqr07listkcmsu7kfb4qd6losn0mer7@bounce.linkedin.com;\n           dmarc=pass (p=REJECT sp=REJECT dis=NONE) header.from=linkedin.com\n    Return-Path: &lt;m-723o1y6u5nc3q4w91izccdjanxjjmqr07listkcmsu7kfb4qd6losn0mer7@bounce.linkedin.com&gt;\n    Received: from maile-db.linkedin.com (maile-db.linkedin.com. [2620:109:c003:104::202])\n            by mx.google.com with ESMTPS id 41be03b00d2f7-7e9f6e88b33si10996189a12.776.2024.10.09.07.38.47\n            for &lt;xyz@gmail.com&gt;\n            (version=TLS1_2 cipher=ECDHE-ECDSA-AES128-GCM-SHA256 bits=128/128);\n            Wed, 09 Oct 2024 07:38:47 -0700 (PDT)\n    Received-SPF: pass (google.com: domain of m-723o1y6u5nc3q4w91izccdjanxjjmqr07listkcmsu7kfb4qd6losn0mer7@bounce.linkedin.com designates 2620:109:c003:104::202 as permitted sender) client-ip=2620:109:c003:104::202;    \n</code></pre>"},{"location":"internet-web/network-internet-basics/#http-clients","title":"HTTP clients","text":"<p>The most common HTTP client is a web browser. The web pages a browser display are nothing but HTTP responses rendered in a human readable format. There are other clients that can issue HTTP requests and receive responses. Two among them are particularly useful for developers: cURL (command line) and Postman (graphical).</p>"},{"location":"internet-web/network-internet-basics/#web-servers-or-http-servers","title":"Web servers or HTTP servers","text":"<p>HTTP servers or web servers are programs that can accept HTTP requests and return HTTP responses. Web servers are discussed in detail in the How Web Servers Work article.</p>"},{"location":"internet-web/web-pages/","title":"How Web Pages Work","text":"<p>A web page is primarily an HTML document. A server only transfers the HTML document and related files to the browser when a user requests a web page. The HTML document contains the content that the user sees on the web page.</p>"},{"location":"internet-web/web-pages/#the-fundamental-building-blocks-of-a-web-page","title":"The fundamental building blocks of a web page","text":"<p>A web page is made up of the following fundamental building blocks:</p> <ul> <li>HTML document. For displaying the content to the user.</li> <li>Images. For displaying images on the page.</li> <li>CSS. For styling the content.</li> <li>JavaScript. For making the web page interactive.</li> </ul> <p>The HTML document is the main file of a web page. But a complex web page needs some additional files (images, CSS files, scripts, etc.), called linked resources.</p>"},{"location":"internet-web/web-pages/#linking-resources-with-html","title":"Linking resources with HTML","text":"<p>The resources needed by an HTML are specified with the <code>&lt;link&gt;</code> tag within the <code>&lt;head&gt;</code> tag of the HTML document. The external resources are usually stored in the server's static directory, but can be in an external server too. After receiving an HTML, browsers send requests to the server for each of the specified resources.</p> <p>An HTML may also need JavaScript files. They are specified as external resources with the <code>&lt;script&gt;</code> tag.</p> <p>Info</p> <p>Passing CSS and JavaScript within HTML</p> <p>CSS and JavaScript can also be passed within the HTML document itself, instead of linking them as external resources. This is done with the <code>&lt;style&gt;</code> and <code>&lt;script&gt;</code> tags, respectively. Example follows:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n    body {\n      background-color: lightblue;\n    }\n  &lt;/style&gt;\n  &lt;script&gt;\n    function greet() {\n      alert(\"Hello, World!\");\n    }\n  &lt;/script&gt;\n&lt;/head&gt;\n&lt;body onload=\"greet()\"&gt;\n  &lt;h1&gt;Welcome to My Web Page&lt;/h1&gt;\n  &lt;p&gt;This is a simple web page.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"internet-web/web-pages/#styling-web-pages-with-css","title":"Styling web pages with CSS","text":"<p>By default, without any styling, a web page looks plain and unappealing. To make it visually attractive, CSS (Cascading Style Sheets) is used. </p> <p>CSS controls the look of an HTML element with its style properties: e.g., the text color, background color, font size, etc. CSS has lots of predefined style properties that can control various style aspects of HTML elements (e.g., color, layout, spacing, positioning, etc.). For example, the <code>color</code> property sets the text color, and the <code>background-color</code> property sets the background color of an element.</p> <p>This simple idea styles all the complex and attractive web pages we see in the internet.</p>"},{"location":"internet-web/web-pages/#css-selectors","title":"CSS selectors","text":"<p>Style properties are grouped under selectors. A selector determines the scope of the style properties, that is, to which HTML elements the style properties apply. In the following example, the <code>body</code> selector sets the background color of the entire page, and the <code>h1</code> selector sets the text color of all <code>&lt;h1&gt;</code> elements. The properties under the <code>body</code> selector apply to the <code>&lt;body&gt;</code> element, and the properties under the <code>h1</code> selector apply to all <code>&lt;h1&gt;</code> elements in the HTML document:</p> <pre><code>body {\n  background-color: lightblue;\n}\n\nh1 {\n  color: darkblue;\n}\n</code></pre> <p>Notice that selectors like <code>body</code> and <code>h1</code> have too broad a scope. They apply to all elements of those types in the document. Two additional CSS selectors give more fine-grained, that is, more specific, control over their scopes: the class selector and the id selector.</p>"},{"location":"internet-web/web-pages/#the-class-selector","title":"The class selector","text":"<p>The <code>.class</code> selector selects all elements with a specific <code>class</code> attribute. For example, <code>.highlight</code> selects all elements with <code>class=\"highlight\"</code>.</p> <p>In the following example, the <code>.highlight</code> selector sets the background color of all elements with <code>class=\"highlight\"</code> to yellow, and the <code>#header</code> selector sets the text color of the element with <code>id=\"header\"</code> to red:</p> <pre><code>.highlight {\n  background-color: yellow;\n}\n</code></pre> <p>Note that an HTML element can have multiple classes. For example, <code>&lt;div class=\"highlight important\"&gt;</code> has two classes: <code>highlight</code> and <code>important</code>. The <code>div</code> element will get the styles defined for both classes.</p>"},{"location":"internet-web/web-pages/#the-id-selector","title":"The id selector","text":"<p>The <code>#id</code> selector selects an element with a specific <code>id</code> attribute. For example, <code>#header</code> selects the element with <code>id=\"header\"</code>.</p> <pre><code>#header {\n  color: red;\n}\n</code></pre> <p>Info</p> <p>Scopes of class and id selectors</p> <p>In an HTML document, <code>id</code> attributes of elements are unique, meaning that only one element can have a specific <code>id</code>. Therefore, a CSS id selector selects only one element. In contrast, <code>class</code> attributes can be shared by multiple elements, so a CSS class selector can select multiple elements. This is why the id selector is more specific than the class selector. In other words, an id selector has a one-to-one mapping with an HTML element, while a class selector has a one-to-many mapping with HTML elements.</p>"},{"location":"internet-web/web-pages/#the-box-model","title":"The box model","text":"<p>CSS views an HTML element as contained in a rectangular box. This box has four parts: content, padding, border, and margin. Those four parts can be controlled with CSS properties. The way these boxes are displayed on the page is called the CSS box model.</p> <p>The following diagram illustrates the box model:</p> <pre><code>flowchart TD\n  subgraph MarginBox[\"Margin\"]\n    BorderBox\n  end\n\n  subgraph BorderBox[\"Border\"]\n    PaddingBox\n  end\n\n  subgraph PaddingBox[\"Padding\"]\n    ContentBox[\"Content\"]\n  end</code></pre> <p>Here is a table summarizing the four parts of the box model:</p> # Part Description Controlling properties 1 Content The actual content inside the element, such as text, images, or other elements. <code>width</code>, <code>height</code> 2 Padding The space between the content and the element's border, creating inner spacing around the content. <code>padding</code> (e.g., <code>padding: 10px;</code>) 3 Border The border that wraps around the padding and content, which can be styled. <code>border-width</code>, <code>border-style</code>, <code>border-color</code> 4 Margin The space outside the border, separating the element from other elements, creating outer spacing around the element. <code>margin</code> (e.g., <code>margin: 20px;</code>)"},{"location":"internet-web/web-pages/#example","title":"Example","text":"<p>Here follows a sample CSS code that demonstrates the box model. Use it on a simple HTML document to see how the box model works:</p> <pre><code>div {\n  width: 200px; /* Content width */\n  height: 100px; /* Content height */\n  padding: 20px; /* Space inside the border */\n  border: 5px solid black; /* Border around the element */\n  margin: 10px; /* Space outside the border */\n}\n</code></pre>"},{"location":"internet-web/web-pages/#client-side-javascript","title":"Client-side JavaScript","text":"<p>Just like without CSS a web page looks plain, without interactivity, response to user actions, a web page is static and unresponsive. Without interactivity, a web page is just a collection of text and images. Users can only read the text and see the images. In the early days of the web, web pages were designed to display text and images.</p> <p>These days, web pages are not limited to just displaying text and images. Complex applications are built as web pages. These applications must be able to respond to user actions, such as clicking buttons, inputting text, and submitting forms. This is where client-side JavaScript comes in.</p> <p>Before getting into how JavaScript brings interactivity to web pages, it is important to understand how browsers run JavaScript.</p>"},{"location":"internet-web/web-pages/#browser-as-a-javascript-runner","title":"Browser as a JavaScript runner","text":"<p>Like NodeJS (the <code>node</code> command), every browser can run JavaScript programs too. In fact, JavaScript was originally designed only to be run on browsers and remained so for a long time, NodeJS came later.</p> <p>Where NodeJS can run any JavaScript file chosen by the user, browsers can only run JavaScript files included in HTML files. JavaScript running on a browser is called client-side JavaScript, and running on a server with NodeJS is called server-side JavaScript. As we will see, client-side JavaScript works together with the HTML document and helps in making web pages interactive.</p> <p>Users can interact with client-side JavaScript from browser console. That means users can access the variables and functions defined in the JavaScript files linked to the HTML document.</p>"},{"location":"internet-web/web-pages/#javascript-dom","title":"JavaScript DOM","text":"<p>Most importantly, client-side JavaScript has access to the HTML document's object representation, called DOM (Document Object Model), through a special object named <code>document</code>. The object is created automatically and is accessible from everywhere in any client-side JavaScript file.</p> <p>Elements of the HTML document can be read and modified through the <code>document</code> object. Therefore, it is the link between the HTML document and client-side JavaScript. Whenever accessing and manipulating the HTML document with client-side JavaScript is needed, use the <code>document</code> object. This allows JavaScript to dynamically change the content, structure, and style of a webpage.</p>"},{"location":"internet-web/web-pages/#how-html-and-client-side-javascript-work-together","title":"How HTML and client-side JavaScript work together","text":"<p>HTML elements can associate functions with its events; those functions are called event handlers. For example, <code>&lt;element onClick=\"function1()\"/&gt;</code> means call <code>function1</code> when element is clicked; <code>&lt;element onLoad=\"function2()\"/&gt;</code> means call <code>function2</code> when element loads. Here both <code>function1</code> and <code>function2</code> are defined in the linked JavaScript files. Here is an exhaustive list of HTML events.</p> <p>An HTML file may have one or more associated JavaScript files containing the functions associated with various events in the HTML file. Functions have access to the HTML document with the <code>document</code> object. HTML elements can be accessed with the <code>document</code> object in several ways: <code>document.getElementById</code> is a popular way.</p> <p>The architecture in summary: perform some operation (function) when something happens (event) to an element.</p>"},{"location":"internet-web/web-pages/#applications-of-client-side-javascript","title":"Applications of client-side JavaScript","text":""},{"location":"internet-web/web-pages/#validating-forms-with-client-side-js","title":"Validating forms with client-side JS","text":"<p>Client-side JavaScript has its application in validating HTML forms. Users may input incorrect data or forget to input mandatory data in forms. The user inputs have to be checked (called validation) before storing in database.</p> <p>Info</p> <p>How HTML forms work.</p> <p>Forms are used to accept inputs from user and passing them to server for storing in database. A form contains a number of inputs of various types and a submit button. When user clicks the submit button, the inputs are passed (submitted) to the server.</p> <p>A server has a URL that handles the form data. The URL that handles the form data is specified in the <code>action</code> attribute (e.g., <code>&lt;form action=\"/submit\"&gt;</code>). The request method can also be specified with the <code>method</code> attribute (e.g., <code>&lt;form action=\"/submit\" method=\"POST\"&gt;</code>. Method can be either <code>GET</code> or <code>POST</code>. Upon submitting the form, the form fields are converted into a request body and sent to the server at the specified URL. The server processes the request and returns a response.</p> <p>In a simple HTML form, upon submission form data is sent to the server. The server then validates the form data. This approach incurs unnecessary network travel costs and server resources.</p> <p>If the form data could be validated at the browser, before submitting to the server, both network travel and server processing could be avoided. Client-side JavaScript is very useful for this purpose: write a JavaScript function that contains the logic to validate the form. In the function, find the form element using the <code>document</code> object, and after that, access and check the form input values. Call the function when the user clicks the submit button. Pass the form to the server only after the function finds no error in the inputs.</p>"},{"location":"internet-web/web-pages/#developing-basic-web-pages","title":"Developing basic web pages","text":"<p>Knowledge of HTML, CSS, and JavaScript is enough to create a basic web page: create an HTML file; create a CSS file for styling it; create a JavaScript file for various event handling; and link the CSS and JavaScript files to the HTML document. Put those files in a server static directory for serving to the client. This architecture can develop fairly complex web pages. In fact, that is how web pages were built for a long time.</p>"},{"location":"internet-web/web-servers/","title":"How Web Servers Work","text":"<p>Info</p> <p>Have a look at the Network &amp; Internet Basics and Working with HTTP articles as prerequisites to this article.</p> <p>The basic job of a web server is to return HTTP responses to HTTP requests. In other words, a web server exchanges data (requests and responses) with clients (usually browsers) over the HTTP protocol. This simple task is the foundation of how websites work. It is the idea behind very complex websites like Facebook, Google, and Wikipedia and mobile applications like WhatsApp, Instagram, and Twitter.</p>"},{"location":"internet-web/web-servers/#how-an-http-server-serves-websites","title":"How an HTTP server serves websites","text":"<p>HTTP responses may contain many types of contents in their bodies and the content's type is indicated by the <code>Content-Type</code> header. Websites are nothing but a particular type of HTTP response that contains an HTML document in its body and its <code>Content-Type</code> header is set to <code>text/html</code>. A browser knows how to render an HTML page. An HTML page may refer to some other resources in it, like images, fonts, stylesheets, scripts, etc. After downloading a page, browsers download all resources associated with the page by separate automatic subsequent requests.</p> <p>The following sequence diagram shows how an HTML page (<code>/page.html</code>) is served by a server.</p> <pre><code>---\ntitle: An HTTP server serving a sample HTML page\n---\nsequenceDiagram\n    autonumber\n    Client-&gt;&gt;Server: GET /page.html\n    Server--&gt;&gt;Client: (200) page.html,content-type:text/html\n    Client-&gt;&gt;Server: GET /image.jpg\n    Server--&gt;&gt;Client: (200) image.jpg,content-type:image/jpeg\n    Client-&gt;&gt;Server: GET /style.css\n    Server--&gt;&gt;Client: (200) style.css,content-type:text/css\n    Client-&gt;&gt;Server: GET /script.js\n    Server--&gt;&gt;Client: (200) script.js,content-type:text/javascript</code></pre> <p>The client (browser) sends a request for the <code>/page.html</code> page to the server; the server returns the page in response. The browser finds that the HTML file refers to some other resources too, like an image (<code>image.jpg</code>), a stylesheet file (<code>style.css</code>), a script (<code>script.js</code>), etc. The browser makes requests for each of them to the server and the server returns them in response.</p>"},{"location":"internet-web/web-servers/#static-vs-dynamic-contents","title":"Static vs. dynamic contents","text":"<p>An HTTP server serves largely two types of content: static and dynamic.</p>"},{"location":"internet-web/web-servers/#serving-static-contents","title":"Serving static contents","text":"<p>For static contents (also called static assets or just assets), programmers use a server directory dedicated for serving static contents. All the static assets to be served (e.g., images, fonts, stylesheets, etc.) are put in the directory. Web servers allow programmers to specify a directory for static contents; the exact instructions vary from server to server. If the requested URL matches a file in the directory, the server returns a response with the file's content as its body.</p> <p>Here follows an example directory (<code>static/</code>) and its contents on a server running at <code>localhost:5000</code>:</p> <pre><code>static/\n  index.html\n  style.css\n  image.jpg\n  page.html\n  sub-dir/\n    index.html\n    style-2.css\n    page-2.html\n  sub-dir-2/\n    image-1.jpg\n    image-2.png\n</code></pre> <p>For example, if a client requests the URL <code>http://localhost:5000/image.jpg</code>, the server returns a response that contains the <code>image.jpg</code> file's content as its body. Similarly, the <code>style-2.css</code> file is returned for the URL <code>http://localhost:5000/sub-dir/style-2.css</code>.</p> <p>Info</p> <p>The <code>index.html</code> convention for directories.</p> <p>As a convention, if a directory is requested instead of a file, like <code>http://localhost:5000/sub-dir/</code>, the <code>index.html</code> file within the directory is returned.</p>"},{"location":"internet-web/web-servers/#serving-dynamic-contents","title":"Serving dynamic contents","text":"<p>Dynamic content, on the other hand, is generated by a server upon receiving a request. In a modern web server, for each URL, programmers define a function associated with the URL that can generate a response. Whenever a request is sent to a URL, the function associated with it generates the response and returns it to the client.</p> <p>Unlike static contents, the same URL may return different responses at different times, depending on the data available to the server at that time. For example, a URL like <code>http://localhost:5000/products/123</code> may return a product page for product ID <code>123</code> at one time and a different product page for the same product ID at another time.</p> Info <p>Progressive Web Applications (PWA)</p> <p>In the last few years, a new trend has emerged for dynamically generating HTMLs in browsers. In this technique, the HTML body generation logic is written in JavaScript and linked in an HTML with an empty body except a <code>div</code>, as is done in the following example. After a browser loads this HTML, the JavaScript file generates the whole HTML body.</p> <pre><code>&lt;html&gt;\n  &lt;head&gt;\n     &lt;title&gt;Page title&lt;/title&gt;\n     &lt;link rel=\"preload\" as=\"script\" href=\"/static/pwa-app.js\"&gt;\n  &lt;/head&gt;\n  &lt;body&gt;&lt;div id=\"app\"&gt;&lt;/div&gt;&lt;body&gt;\n&lt;/html&gt;\n</code></pre> <p>Several frameworks, like React and Vue, support building PWAs. A detailed treatment of PWA is out of the current article's scope.</p>"},{"location":"internet-web/web-servers/#website-performance","title":"Website performance","text":"<p>Several factors affect a website's performance, that is, how fast a website can return responses. A developer should be aware of them and a few common techniques used to mitigate them.</p>"},{"location":"internet-web/web-servers/#repeated-access-to-the-same-data","title":"Repeated access to the same data","text":"<p>Observe that many contents are repeated, like logo images and stylesheets, across pages in a website. For example, different pages in <code>wikipedia.org</code> use the same logo and styles. Therefore, for each page, browsers are supposed to download those same data from the server. Fortunately, browsers and servers together employ caching as a technique to avoid the repeated requests for the same data.</p> <p>In caching, both browser and server have their roles. Browsers cache HTTP responses, which means they store the responses locally. Servers avoid sending data that a client requested earlier unless there are changes to it since the last time; on such occasions, they signal the browser that the requested data has no changes and as a result, browsers reuse the cached data.</p> <p>Let's say that a browser has received some data, say, an image, from a server and cached it as usual. When the browser requests the same data again and the server finds that the data hasn't changed since the client last requested it, the server doesn't send the data again. Instead, the server returns a response with status code 304 (not modified) and without a body, resulting in a smaller response size.</p> <p>The status code 304 tells the client that it may use its cached version of the data as it hasn't changed on the server. On the other hand, if the server detects that the data has changed, it returns a usual response with status code <code>200</code> (OK) and the data included in the response body. This technique is particularly useful for static data that hardly changes (e.g., images, stylesheets, etc.). A hard refresh (Ctrl+Shift+R) clears the browser cache and makes the browser download all the data again.</p>"},{"location":"internet-web/web-servers/#response-size","title":"Response size","text":"<p>Both HTTP requests and responses travel over networks. An HTTP client downloads the HTTP responses on the client computer. The response size affects the download speed: a response with a larger body takes longer to download.</p> <p>Compression and minification are two commonly used optimization techniques to reduce the HTTP response size.</p>"},{"location":"operating-systems/os-basics/","title":"Operating System Basics","text":"<p>A computer consists of these fundamental components: CPUs or processors, memory (aka RAM), and storage (aka disk). Besides these a computer may have many other peripheral devices. An operating system controls and coordinates all resources (e.g. processor, memory, disk, devices, etc.) of a computer. It also controls all programs (processes in OS terminology) running on a computer.</p>"},{"location":"operating-systems/os-basics/#command-line-interfaces-clis","title":"Command line interfaces (CLIs)","text":"<p>The early operating systems used to have only command line interfaces: users had to perform all tasks by typing in commands. It was inconvenient for many reasons. All modern OSs are graphical user interface (GUI) based. It may sound strange at first, however, the old command line interfaces (CLI) have some benefits too. That is why the modern OSs provide command line interfaces besides the graphical interface. The window where users input commands is called a terminal.</p> <p>Many operations usually done from GUI has CLI equivalents too. For example, we usually download files through a browser, but it can done from CLI too. The following command downloads the <code>install.sh</code> file from the specified URL: <code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh</code></p>"},{"location":"operating-systems/os-basics/#benefits-of-cli","title":"Benefits of CLI","text":"<p>CLIs are particularly helpful when you want to automate a batch of tasks (that is a number of tasks to be executed one after another). Say, you want to download and install a few programs one after another. In such situations in a graphical interface, you have to be in front of the computer during the entire process. But if all the download and install commands were written down in a script, as is done in this example, the commands would execute one after another on their own until they are finished.</p>"},{"location":"operating-systems/os-basics/#clis-provided-by-various-oss","title":"CLIs provided by various OSs","text":"<p>The Windows operating system provides two CLIs: the Command Prompt (the old one) and Power Shell (the new and more capable one). Search for command prompt and power shell from start menu if you want to run them. The Linux OSs provide the Shell CLI and its derivative Bash.</p> <p>Commands vary from CLI to CLI: the same command may work on one but not on the other. The <code>ls</code> command, for example, is available in Power Shell but not in Command Prompt.</p> Info <p>Windows Subsystem for Linux (WSL)</p> <p>Linux Shell is the de-facto standard for CLIs, much convenient and more widely used than Windows Command Prompt and Power Shell. Lately, the Windows Subsystem for Linux (WSL) feature in Windows enables running Linux commands from Windows OS. WSL is effectively a Linux OS without GUI within the Windows OS. You can run Linux commands by running WSL on Windows.</p> <p>Getting handy with Linux commands is a big plus for any developer, even if you are a Windows user. See this video for an overview of the most frequently used Linux commands.</p>"},{"location":"operating-systems/os-basics/#32-bit-and-64-bit-os","title":"32-bit and 64-bit OS","text":"<p>Often when you want to download an application, you find that two versions (builds) are available: 32-bit and 64-bit (for example, the FileZilla FTP client: 64-bit and 32-bit). The two builds provide the same functionality, but they differ on the type of CPU they are targeted for.</p> <p>CPUs fetch a small amount of data at a time, required for executing only one instruction, from a much larger memory. The fetching happens with memory addresses; each memory location has its address, which is a number. Now, 64-bit CPUs use 64-bit wide addresses, therefore can access a larger memory space (2<sup>64</sup> bits, that is 17,179,869,184 GB) than a 32-bit one can (2<sup>32</sup> bits, that is 4 GB). Just like cell phone numbers, more digits mean more phones. In summary, 64-bit CPUs are more capable than the 32-bit ones: a 32-bit CPU cannot use a memory larger than 4 GB even if it is available.</p> <p>Operating systems are targeted according to CPU types: there are 64-bit OSs and 32-bit OSs as well. These days, most CPUs and OSs are 64-bit, and as a result, many applications don't provide a 32-bit build at all (like Postman).</p> <p>For further details, consult this resource: Difference Between 32-bit and 64-bit Operating Systems.</p>"},{"location":"programming/data-structures/","title":"Data Structures","text":"<p>In programs, data is organized based on various scenarios. The techniques of representing data in programs are called data structures. Each data structure vary from the other and are suitable for different scenarios.</p> <p>A few commonly used data structures are the following:</p> <ol> <li>Arrays.</li> <li>Stacks.</li> <li>Queues.</li> <li>Linked lists.</li> <li>Maps.</li> <li>Graphs.</li> </ol>"},{"location":"programming/data-structures/#linked-lists","title":"Linked lists","text":"<p>In the linked list data structure data is organized as sequential nodes. Each node contains some data and points (links) to its next node. The first node is called the head of the linked list, and the last node, which points to no node, is called its tail.</p> <pre><code>---\ntitle: Linked list\n---\nstateDiagram-v2\n    direction LR\n    n1: Node 1 (Head)\n    n2: Node 2\n    n3: Node 3\n    n4: Node 4 (Tail)\n    n1 --&gt; n2: next\n    n2 --&gt; n3 : next\n    n3 --&gt; n4 : next</code></pre> <p>In order to use a linked list, programmers have to keep track of its head and tail nodes.</p>"},{"location":"programming/data-structures/#inserting-elements","title":"Inserting elements","text":"<p>In a linked list one node is appended to it at a time by updating its tail. The new node becomes the new tail of the list.</p>"},{"location":"programming/data-structures/#traversal","title":"Traversal","text":"<p>Traversing a linked list begins by setting the head as the current node. After that, each time, the current node is updated to the next node until the current node points to nothing.</p> <p>As we can see, a linked list can be traversed only in a forward direction, where an array can be traversed in both directions. Moreover, in an array, any element can be accessed by its index, whereas in a linked list, a node can be reached only by traversing all of its preceding nodes.</p>"},{"location":"programming/math-prog/","title":"Mathematics for Programming","text":"<p>Mathematics for programming is mainly about integers. There's a dedicated branch of mathematics called Discrete Mathematics for its study. The following basic mathematical ideas are necessary for programmers. Consult an authoritative discrete mathematics book for further details.</p>"},{"location":"programming/math-prog/#integers","title":"Integers","text":"<p>In everyday life, we are used to working with mainly two types of numbers: whole numbers (e.g. \\(0, 1, 2, 3, ...\\)) and numbers with fractional parts (e.g. \\(0.5, 1.2, 3.14, ...\\)).</p> <p>In mathematics, whole numbers are called integers. They can be both positive and negative, including zero. Examples of integers include \\(-3\\), \\(0\\), and \\(42\\). In daily life, we use integers most commonly for counting objects. Integers are very important in programming and computer science. A programmer should be aware of the basic facts about integers.</p>"},{"location":"programming/math-prog/#floor-and-ceiling-functions","title":"Floor and ceiling functions","text":""},{"location":"programming/math-prog/#the-floor-function","title":"The floor function","text":"<p>The floor of any real number is the greatest integer less than or equal to it. Floor of \\(x\\) is denoted as \\(\u230ax\u230b\\). Examples: \\(\u230a2.3\u230b = 2\\), \\(\u230a8.9\u230b = 8\\), \\(\u230a7.0\u230b = 7\\).</p> <p>Sometimes we need to find the floor of the division of two integers, like \\(\u230an / d\u230b\\). In these cases, the floor is the quotient of the division. That means if \\(n = d \u00d7 m + r\\), then the floor is \\(m\\). For example, \\(\u230a14 / 4\u230b = 3\\), because \\(14 = 4 \u00d7 3 + 2\\). Dividing two integers this way is known as integer division.</p> Info <p>Integer division results in programming languages</p> <p>Dividing two integers often results into a floating point number (e.g. \\(14 / 4 = 3.5\\)). In most programming languages (e.g. C, C++, Java) the result of division of two integers is floored. See the following C language snippet, for example:</p> <pre><code>int d = 14 / 4;\n// value of 'd' is 3 though mathematically it is 3.5\n</code></pre>"},{"location":"programming/math-prog/#the-ceiling-function","title":"The ceiling function","text":"<p>The ceiling of any real number is the smallest integer greater than or equal to it. Ceiling of \\(x\\) is denoted as \\(\u2308x\u2309\\). Examples: \\(\u23089.2\u2309 = 10\\), \\(\u23087.8\u2309 = 8\\), \\(\u230813.0\u2309 = 13\\).</p> <p>Warning</p> <p>Floor-ceiling functions and rounding off</p> <p>Floor and ceiling functions must not be confused with rounding off.</p> Tip <p>Getting ceiling of integer division results in programming languages</p> <p>As mentioned earlier, most languages floors the division result of two integers. Sometimes, however, you want the ceiling of division results instead. The trick is to add the divisor minus \\(1\\) to the dividend before division. See the following snippet for an illustration in the C language:</p> <pre><code>int r = (m + d - 1) / d;\n</code></pre>"},{"location":"programming/math-prog/#modular-arithmetic","title":"Modular arithmetic","text":""},{"location":"programming/math-prog/#the-modulo-operator","title":"The modulo operator","text":"<p>\\(a \\mod m = r\\) (pronounced \\(a\\) modulo/mod \\(m\\) equals \\(r\\)) means that \\(r\\) is the remainder after dividing \\(a\\) with \\(m\\). Example: \\(14 \\mod 3 = 2\\).</p> <p>In programming languages the <code>%</code> operator is used as the modulus operator. Example: <code>14 % 3</code>.</p> Problems <ol> <li>Divisibility and congruence.<ol> <li>Given an integer \\(n\\), check whether it is divisible by another integer \\(m\\).</li> <li>Given an integer \\(m\\), what are the possible remainders after any integer is divided by \\(m\\)?</li> </ol> </li> <li>Digits.<ol> <li>Given an integer \\(n\\), print all of its digits.</li> <li>Given an integer \\(n\\), find the integer that is found by reversing the digits of \\(n\\).</li> </ol> </li> <li>Pagination.<ol> <li>Given a number of elements \\(n\\) to be paginated (divided into pages). Each page can contain at most \\(k\\) elements. How many pages are required for \\(n\\) elements?</li> <li>Given that a page can contain \\(k\\) elements, which page does the \\(i\\)-th element belong to?</li> <li>Given that a page can contain \\(k\\) rows, do the \\(i\\)-th and \\(j\\)-th elements belong to the same rows in their respective pages?</li> </ol> </li> </ol>"},{"location":"programming/math-prog/#number-formats","title":"Number formats","text":"<p>Numbers are represented with digits and place values. The most common number system, the decimal system, is \\(10\\)-based, meaning it has 10 digits and its place value increases by a factor of \\(10\\). For example, the number \\(253\\) actually equals \\(2 \u00d7 10^2 + 5 \u00d7 10^1 + 3 \u00d7 10^0 = 200 + 50 + 3\\).</p> <p>There are number formats with a base other than the usual 10-based decimal. A programmer has to be familiar with the following number representations.</p>"},{"location":"programming/math-prog/#binary-numbers","title":"Binary numbers","text":"<p>Binary representation is \\(2\\)-based, meaning it has only two digits: \\(0\\) and \\(1\\). The place value of a binary number increases by a factor of \\(2\\). For example, the binary number \\(1011\\) actually equals \\(1 \u00d7 2^3 + 0 \u00d7 2^2 + 1 \u00d7 2^1 + 1 \u00d7 2^0 = 8 + 0 + 2 + 1 = 11\\) in decimal.</p> <p>Problem</p> <p>Find the binary representation of an integer</p> <p>Finding the binary representation of an integer means finding the binary digits of an integer, which is similar to finding all the decimal digits of an integer. In binary, however, the number is successively divided by 2 instead of 10. Try to write a program that finds the binary representation of an integer.</p> <p>Info</p> <p>A binary digit is called a bit, short for binary digit, named by computer scientist Claude Shannon. Additionally, 8 bits is called a byte and computers mostly work with bytes.</p> <p>Notice the following two special cases of binary numbers: the number \\(2^n\\) in binary is a \\(1\\) followed by \\(n\\) number of \\(0\\)s, and, the number \\(2^n - 1\\) in binary is \\(n\\) number of \\(1\\)s.</p> \\(n\\) \\(2^n\\) in binary \\(2^n - 1\\) in binary \\(0\\) \\(1\\) \\(0\\) \\(1\\) \\(10\\) \\(1\\) \\(2\\) \\(100\\) \\(11\\) \\(3\\) \\(1000\\) \\(111\\) \\(4\\) \\(10000\\) \\(1111\\)"},{"location":"programming/math-prog/#hexadecimal-numbers","title":"Hexadecimal numbers","text":"<p>Binary representation of numbers are too long and often hard to work with. The 16-based hexadecimal representation is shorter and more convenient for practical uses. There are 16 digits in this format: <code>0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F</code>. Sometimes, small cases (<code>a, b, c, d, e, f</code>) are used to represent the last digits. A hexadecimal number is prefixed by a <code>0x</code> (or <code>x</code> sometimes) to indicate that it is a hexadecimal number.</p> <p>Examples: <code>0x12</code> (the value is 18, not 12) <code>0xAF</code>, <code>0x2A</code>, <code>x20</code>, <code>xA4</code>, <code>xAC</code>.</p> Example <p>Hexadecimal representation of bytes</p> <p>Notice that each hexadecimal digit is equivalent to 4 binary digits or 4 bits and two hexadecimal digits form a byte (e.g. <code>0x7A</code>).</p> <p>Hexadecimal representation of colors</p> <p>Colors in computer are represented with numbers. Each color has its own unique number. For example, the color white is represented as <code>0xFFFFFF</code>, while black is <code>0x000000</code>. See this resource for a list of hexadecimal representation of commonly used colors. This hexadecimal color naming format is widely used in HTML and other applications.</p>"},{"location":"programming/math-prog/#counting","title":"Counting","text":"<p>Counting (aka combinatorics) is a vast topic in mathematics. A programmer needs to know a few commonly used counting techniques.</p>"},{"location":"programming/math-prog/#sum-rule-and-product-rule","title":"Sum rule and product rule","text":"<p>The sum and product rule of counting are particularly important. They occur frequently at work. Here follows a working definition of the two rules:</p> <p>Sum rule. If a task has \\(n\\) options and each option has \\(a_1, a_2, ... a_n\\) choices, then there are \\(a_1 + a_2 + ... + a_n\\) choices in total for completing the task.</p> <p>For example, there are two options, buses and trains, to travel from city \\(A\\) to \\(B\\). There are \\(4\\) buses and \\(3\\) trains. Therefore, there are \\(4 + 3 = 7\\) choices for traveling from city \\(A\\) to \\(B\\) in total.</p> <p>Product rule. If a task has \\(n\\) steps and there are \\(a_1, a_2, ... a_n\\) choices for each of them, then there are \\(a_1 \u00d7 a_2 \u00d7 ... \u00d7 a_n\\) choices in total for completing the task. A common special case of the rule is when each option has the same \\(m\\) number of alternatives, then there are total \\(m \u00d7 m \u00d7 ... \u00d7 m = m^n\\) choices.</p> <p>For example, you have to travel from city \\(A\\) to \\(C\\) via city \\(B\\). From city \\(A\\) to \\(B\\), there are \\(3\\) trains, and from city \\(B\\) to \\(C\\), there are \\(2\\) buses. Then, there are \\(3 \u00d7 2 = 6\\) choices for traveling from city \\(A\\) to \\(C\\) in total.</p> Question <ol> <li>From city \\(A\\) to \\(B\\) there are \\(m\\) routes and from city \\(B\\) to \\(C\\) there are \\(n\\) routes. How many routes are there from city \\(A\\) to \\(C\\)?</li> <li>A mobile operator has numbers of this format: <code>0147 xxx xxx</code>. The first digits are fixed for the operator and the last \\(6\\) digits may vary. How many users can this operator have at most?</li> <li>How many iterations do the following loop execute?    <pre><code>for (let i = 0; i &lt; n; i++) {\n\n    for (let j = 0; j &lt; l; j++) {\n    }\n\n    for (let j = 0; j &lt; m; j++) {\n    }\n}\n</code></pre></li> </ol> <p>Consult this resource for details.</p>"},{"location":"programming/math-prog/#logarithms","title":"Logarithms","text":"<p>Relationship between power and logarithm: \\(\\log_b n = x\\) means \\(b^x = n\\). In other words, \\(n\\) can be successively divided by \\(b\\) for \\(x\\) times.</p> <p>For example, \\(\\log_2 8 = 3\\) means \\(2^3 = 8\\), or \\(8\\) can be successively divided by \\(2\\) for \\(3\\) times: \\(8 / 2 = 4\\), \\(4 / 2 = 2\\), and \\(2 / 2 = 1\\).</p> <p>In computer science, \\(2\\)-based logarithm is frequent. It is sometimes written as \\(\\lg\\) in short (e.g., \\(\\lg n = x\\) means \\(2^x = n\\)).</p>"},{"location":"programming/mental-models/","title":"Mental Models for Programmers","text":"<p>The first step to solving a problem is to express it properly. Expressing complex ideas requires mental models, analogies that are similar to ideas. Mental models not only express a problem but also guide your thought and aid your reasoning.</p> <p>Mental models are also vital in communicating ideas with collaborators.</p> <p>This page contains a list of commonly used mental models that often serve as analogies while expressing complex ideas.</p>"},{"location":"programming/mental-models/#ranges-or-intervals","title":"Ranges or intervals","text":"<p>A range is a set of numbers between two numbers. For example, the range of numbers between \\(x\\) and \\(y\\), where \\(x \\leq y\\), is represented as \\([x, y]\\). The first number, \\(x\\), is called the lower bound of the range and the second number, \\(y\\), is called the upper bound of the range. A range may be inclusive or exclusive. For example, the range \\([1, 10]\\) is inclusive, while \\((1, 10)\\) is exclusive.</p>"},{"location":"programming/mental-models/#representing-ranges-in-programs","title":"Representing ranges in programs","text":"<p>The simplest way to represent a range in programs is with a pair of variables, one for the lower bound and the other for the upper bound. For example, a range \\([x, y]\\) is represented with two variables <code>x</code> and <code>y</code>, where <code>x</code> is the lower bound and <code>y</code> is the upper bound.</p> <p>Additionally, a list of ranges is often represented with a two-dimensional array, where each element is a pair of numbers representing the lower and upper bounds of a range. For example, in JavaScript, the list of ranges \\([[1, 5], [6, 10]]\\) may be represented as <code>let ranges = [[1, 5], [6, 10]]</code>.</p> <p>It should also be obvious that a range can also be represented with objects. For example, in JavaScript, a range can be represented as an object with <code>lower</code> and <code>upper</code> properties: <code>let range = { lower: 1, upper: 5 }</code>.</p>"},{"location":"programming/mental-models/#applications-of-ranges","title":"Applications of ranges","text":"<ul> <li> <p>Iterating over a range. A loop usually iterates over a range of numbers. For example, in a <code>for</code> loop, the range is defined by the starting and ending values of the loop variable. The following common loop iterates over the range \\([0, n)\\) or, alternatively, \\([0, n-1]\\): <code>for (let i = 0; i &lt; n; i++)</code>.</p> </li> <li> <p>Binary search. A range represents the search space in binary search algorithm. Initially, the range is the complete array to be searched. In each iteration, binary search halves the search space based on the comparison with the middle element of the range.</p> </li> </ul> Problems <ol> <li>Given an interval/range \\([x, y]\\), find if the integer \\(n\\) falls within the interval/range.</li> <li>Given an interval/range \\([x, y]\\), shift it by \\(k\\) positions to the right or left.</li> <li>Given two intervals/ranges \\([x_1, y_1]\\) and \\([x_2, y_2]\\), check whether they overlap or not.</li> <li>Given two overlapping intervals \\([x_1, y_1]\\) and \\([x_2, y_2]\\), merge/unify them into one interval.</li> <li>Given two overlapping intervals \\([x_1, y_1]\\) and \\([x_2, y_2]\\), find their intersection interval.</li> <li>Given two intervals \\([x_1, y_1]\\) and \\([x_2, y_2]\\), check whether the first interval is a sub-interval of the second interval.</li> <li>Dividing intervals.<ol> <li>Given an interval \\([x, y]\\), divide it into two equal half intervals.</li> <li>Given an interval \\([x, y]\\), divide it into two intervals at index \\(k\\).</li> </ol> </li> <li>Given a list of intervals (e.g., \\([x_1, y_1], [x_2, y_2], \u2026 [x_n, y_n]\\)), sort them based on their lower bounds.</li> <li>Given a list of intervals (e.g., \\([x_1, y_1], [x_2, y_2], \u2026 [x_n, y_n]\\)), check how many of them coincide with a given point \\(p\\). (this problem is also known as stabbing query).</li> </ol>"},{"location":"programming/mental-models/#grids-or-matrices","title":"Grids or matrices","text":"<p>A grid or matrix consists of a number of rows and columns. A grid with \\(m\\) rows and \\(n\\) columns is called an \\(m \u00d7 n\\) grid. In other words, the grid's dimension is \\(m \u00d7 n\\).</p> <p>In programs, a grid is represented as a two-dimensional array, where each element is a row of the grid.</p> Problems <ol> <li>Traversing rows and columns.<ol> <li>Given an \\(m \u00d7 n\\) grid of integers, traverse its \\(i\\)-th row in forward and reverse directions.</li> <li>Given an \\(m \u00d7 n\\) grid of integers, traverse its \\(j\\)-th column in forward and reverse directions.</li> </ol> </li> <li>Traverse an \\(m \u00d7 n\\) grid in row-major order, that is, row by row.</li> <li>Traverse an \\(m \u00d7 n\\) grid in column-major order, that is, column by column.</li> <li>Traversing diagonals.<ol> <li>Given an \\(n \u00d7 n\\) square grid of integers, traverse its two diagonals.</li> <li>Given an \\(m \u00d7 n\\) grid of integers, traverse all of its diagonals.<ol> <li>How many diagonals are there in an \\(m \u00d7 n\\) grid?</li> <li>What is the length of each diagonal in an \\(m \u00d7 n\\) grid?</li> </ol> </li> </ol> </li> <li>Given an \\(m \u00d7 n\\) grid, traverse its \\(p \u00d7 q\\) (\\(p &lt; m\\), \\(q &lt; n\\)) sub-grid starting at \\((i, j)\\).</li> <li>Given an array of integers of length \\(n\\), divide it into a \\(p \u00d7 q\\) grid.</li> <li>Given an array of length \\(n\\), imagine it as a grid with \\(m\\) columns. Find the element at \\(i\\)-th row and \\(j\\)-th column in the imaginary grid.</li> <li>Traversal based on adjacency.<ol> <li>Starting from a cell \\(x, y\\) in a grid, traverse all of its \\(4\\) adjacent cells.</li> </ol> </li> </ol>"},{"location":"programming/mental-models/#associations-or-maps","title":"Associations or maps","text":"<p>The concept association is found everywhere in real world. Two things are associated means that they are somehow related to each other. For example, affixing a price tag to a product is associating the price with the product, meaning that the product's price is the amount printed on the tag.</p> <p>Associations may be used for identification (e.g. roll number uniquely identifies a student), for indicating ownership (e.g. labels on parcels), and many other relationships. We can picture associations as arrows pointing from an object to another or from a set of objects to another.</p> <p>Depending on context, an object may be associated with only one other object (one-to-one) or multiple objects (one-to-many).</p> <p>Inspired by the mathematical concept of map (aka functions) the word map is often used instead of association: for example, the two objects are mapped to each other, a mapping exists between the objects, map this thing to that thing, etc.</p>"},{"location":"programming/mental-models/#examples","title":"Examples","text":"<p>Developing an ability to identify associations in various scenarios and also expressing them is very important for a programmer.</p> <ol> <li>In a dictionary, meanings are associated with a word (one-to-many).</li> <li>Any ID number (e.g. roll numbers, license numbers, national IDs) is associated or mapped with a person (one-to-one).</li> <li>A website is mapped or associated with its domain (e.g. <code>google.com</code>, <code>wikipedia.org</code>, etc.)</li> <li>A Git local repository may be associated with one or more remotes (one-to-many).</li> </ol>"},{"location":"programming/mental-models/#associations-in-programming","title":"Associations in programming","text":"<p>Objects (called records in some languages) in programming languages are associative by nature. The properties of an object contain the values associated with it. For example, a student object contains only the information associated with a particular student (e.g. name, class, roll number, etc.)</p> <p>The map data structure (called dictionary in some languages) is capable of storing and retrieving associations. A map variable can both associate a key with a value, and also can find the associated value given the key. The mapping rule (which key is to be associated with which value) is up to the programmer.</p>"},{"location":"programming/mental-models/#hierarchy","title":"Hierarchy","text":"<p>A hierarchy organizes things at a number of levels. A level is owned by its parent level and it owns its child levels. Depending on contexts, different terms are used instead of parent and child levels. Hierarchy is a natural way of organizing things on many occasions. A hierarchy may represent ownership, priority, and many other things.</p> <p>Hierarchies are often represented with trees. Organizing things in hierarchies whenever possible helps understand the relationship among them.</p>"},{"location":"programming/mental-models/#examples_1","title":"Examples","text":"<ol> <li>Staffs in organizations are usually organized in a hierarchy called organizational chart, or organogram. Staffs at a higher level of hierarchy oversees or supervises the ones at the lower levels of hierarchy; staffs at a lower level of hierarchy reports to those at the higher level.</li> <li>Operating systems organize the files in its disks in a hierarchy called file tree. A parent directory owns all the subdirectories and files within it. Deleting a parent directory deletes all its child directories and files too.</li> <li>Table of contents of a book is also a hierarchy. A chapter contains its sections, subsections. It helps readers navigating through the book.</li> <li>In source codes, indentations are used to represent hierarchies. A code block is indented to indicate that it is owned by its parent block.</li> <li>Designers use various visual hierarchy techniques in designs to indicate priority (e.g. larger or darker texts are more important), help navigation (e.g. a breadcrumbs), etc.</li> </ol>"},{"location":"programming/mental-models/#state-machines","title":"State machines","text":"<p>In any system, objects exist in various states; various actions change their states; change from one state to another is called a transition. Among all the actions in a system only a few of them are applicable to a state. Some transitions maybe reversible, others maybe irreversible. For example, in an order delivery system an order maybe in these states: order received, packed, cancelled, in transit, delivered, etc.</p> <p>State transitions can be represented with state transition diagrams (aka state machine diagrams) or state transition tables.</p>"},{"location":"programming/mental-models/#examples_2","title":"Examples","text":"<p>Identifying the states and transitions in a system help reasoning about the system.</p>"},{"location":"programming/mental-models/#the-git-version-control-system","title":"The Git version control system","text":"<p>A file in a Git repository can be in the following states: untracked, staged, unchanged, or modified. Here follows a state transition diagram that shows how a file's state is changed and which actions cause them. Some transitions are omitted for simplicity.</p> <pre><code>---\ntitle: State transitions of a file in a Git repository\n---\nstateDiagram-v2\n  ut : Untracked\n  st : Staged\n  un : Unchanged\n  md : Modified\n  [*] --&gt; ut : Create a file\n  ut --&gt; st : Stage the file (git add)\n  st --&gt; md : Make changes to the file\n  st --&gt; un : Commit the file (git commit)\n  un --&gt; md : Make changes to the file\n  md --&gt; st : Stage the file (git add)</code></pre>"},{"location":"programming/mental-models/#flowcharts","title":"Flowcharts","text":"<p>A system consists of one or more processes (also called simply flows). A process is a series or sequence of operations. One operation may lead to another; there may be decisions between the operations (which operation takes place next).</p> <p>Processes are everywhere around us. They are represented with flowcharts. All operations preceding an operation are called its upstream operations; conversely, all operations following an operation are called its downstream operations.</p> <p>Every program you write actually implements a flowchart.</p>"},{"location":"programming/mental-models/#examples_3","title":"Examples","text":"<p>The following flowchart illustrates a simplified money withdrawal process in an ATM booth. Note that the ATM system is capable of other processes too: checking balance, transferring money, etc. Those processes have their own flowcharts.</p> <pre><code>---\ntitle: ATM cash withdrawal\n---\nflowchart\n  in([Insert card])\n  pin[Enter PIN]\n  pinchk{PIN correct?}\n  retchk{\"`Max retry \n  exceeded?`\"}\n  amount[\"`Enter \n  amount`\"]\n  blncchk{\"`Enough \n  balance?`\"}\n  disp[\"`Dispense \n  money`\"]\n  retcrd([Return card])\n  in --&gt; pin\n  %%subgraph identify[Check PIN]\n  pin --&gt; pinchk\n  pinchk --&gt; |No| retchk\n  retchk --&gt; |No| pin\n  %%end\n  pinchk --&gt; |Yes| amount\n  retchk --&gt; |Yes| retcrd\n  %%subgraph withdraw[Withdraw money]\n  amount --&gt; blncchk\n  blncchk --&gt; |No| amount\n  blncchk --&gt; |Yes| disp\n  %%end\n  disp --&gt; retcrd</code></pre>"},{"location":"programming/problem-solving-tactics/","title":"Problem-Solving Tactics","text":""},{"location":"programming/problem-solving-tactics/#loop-invariants","title":"Loop invariants","text":"<p>Loop invariants is an important problem-solving tactic. A certain class of problems consist of a number of smaller subproblems. Such problems are solved by loops designed for solving them. Starting from the smallest subproblem, the loop proceeds to bigger subproblems in each iteration, and eventually solves the whole problem.</p> <p>The loop has to be designed in such a way that after each iteration of the loop, the problem is partially solved up to that point. Given the partial solution of smaller subproblems, the loop body has to find the solution for the subproblem larger in size by 1. That way, after the loop terminates, the whole problem is solved.</p> <p>Notice that after each iteration, the loop ensures that the condition the subproblem has been solved holds true. The condition is called the loop invariant.</p> <p>It is the programmer's job to recognize how the problem can be divided into subproblems and write a loop body that maintains the loop invariant. The loop body differs from problem to problem.</p>"},{"location":"programming/problem-solving-tactics/#example","title":"Example","text":"<p>Let's assume that a problem asks to sort an array \\(a\\) consisting of \\(n\\) elements. A loop designed for solving that problem assumes that the problem is solved for subproblem \\([a_0 ... a_{i - 1}]\\), that is, elements \\([a_0 ... a_{i - 1}]\\) has been sorted. Given that elements \\([a_0 ... a_{i - 1}]\\) has been sorted and a new element \\(a_i\\), the loop body has to sort elements \\([a_0 ... a_i]\\). As the loop body ensures that elements \\([a_0 ... a_i]\\) is sorted, when the loop terminates, the whole array is sorted. The loop invariant in this case is the array \\([a_0\u2026a_i]\\) is sorted.</p>"},{"location":"programming/problem-solving-tactics/#recursion","title":"Recursion","text":"<p>Recursion is an important problem solving technique. It is useful in problems where solution to the problem has a relationship with the solution to its smaller case.</p>"},{"location":"programming/problem-solving-tactics/#designing-recursion","title":"Designing recursion","text":"<p>Finding recursive solution to a problem mainly involves the following two steps:</p> <ol> <li>Find the relationship between the solution of \\(n\\) and the solution of \\(n - 1\\).</li> <li>Define the result for the base conditions.</li> </ol>"},{"location":"programming/problem-solving-tactics/#properties-of-recursion","title":"Properties of recursion","text":"<p>Keep the following properties of recursion in mind:</p> <ul> <li>A chain of function calls is needed to solve a problem.</li> <li>Each function call has its own copy of all of its local variables, including its parameters.</li> <li>All the calls, however, have access to the global variables of the program.</li> <li>The calling function waits for the result to be returned by the function it called with a smaller parameter.</li> </ul>"},{"location":"programming/problem-solving-tactics/#backtracking","title":"Backtracking","text":"<p>Backtracking is an important problem solving technique exploiting recursion.</p>"},{"location":"programming/problem-solving-tactics/#backtracking-problems","title":"Backtracking problems","text":"<p>Backtracking problems consist of a number of levels or steps with each level having a few choices or possibilities. Backtracking means traversing all the possibilities consisting of all the levels. For example, printing all possible \\(n\\)-digit numbers can be viewed as a problem consisting of \\(n\\) levels. For each level, there are 10 choices, that is the 10 decimal digits. Printing all possible \\(n\\)-digit numbers means trying all the choices for each of the \\(n\\) levels.</p> <p>The number of levels and the choices for each level may vary problem to problem. For the all possible \\(n\\)-digit numbers problem, for each level, the choices are the same, all the 10 decimal digits. For the all possible subsets of a set of size \\(n\\) problem, for each level there are two choices, whether the element is included in the subset or not. For some problems, the choices may not be independent like the earlier. For example, in finding all possible permutations, an element chosen at a level cannot be chosen in later levels; the function has to keep track of it.</p>"},{"location":"programming/problem-solving-tactics/#backtracking-algorithms","title":"Backtracking algorithms","text":"<p>Backtracking algorithms employ recursion to solve a backtracking problem. Each function call takes care of a level where the level is identified by a function parameter. After making a choice for its level, the function lets exploring all the possibilities for the rest of the levels by calling the function itself with a smaller parameter.</p> <pre><code>let printAllNumbers = (n, p) =&gt; {\n\n    if (n == 0) {\n        console.log(p);\n        return;\n    }\n\n    for (let i = 0; i &lt; 10; i++) {\n        printAllNumbers(n - 1, p + i);\n    }\n}\n</code></pre> <p>In the preceding example of a backtracking function for printing all possible \\(n\\)-digit numbers, the level is identified by the parameter <code>n</code>. For any level <code>n</code>, the <code>for</code> loop tries a possibility, that is a digit <code>i</code>, and calls the function itself with parameter <code>n-1</code> to find the all possible \\(n-1\\)-digit numbers after it. Once the function returns after trying all the \\(n-1\\)-digit numbers, the loop tries the next possibility, that is the next digit <code>i</code>, and again calls the function itself to find the all possible \\(n-1\\)-digit numbers after it. This process continues until all the possibilities of the current level, that is all the 10 decimal digits, are tried.</p> <p>Passing result and keeping track of choices in levels vary problem to problem.</p>"},{"location":"programming/problem-solving-tools/","title":"Problem Solving Tools","text":""},{"location":"programming/problem-solving-tools/#using-language-sorting-libraries","title":"Using language sorting libraries","text":"<p>Sorting is a common operation. Many problems require sorting as part of solving it. Instead of writing a sort function themselves, while solving a problem, programmers usually use the sorting library functions provided by their language. In JavaScript, for example, the following function call sorts an integer array in increasing order.</p> <pre><code>const arr = [10, 4, 8, 3, 9, 7, 1];\narr.sort();\n\nconsole.log(arr);\n</code></pre>"},{"location":"programming/problem-solving-tools/#using-custom-comparison-functions","title":"Using custom comparison functions","text":"<p>For integers, the sorting is obvious, but what about objects? How to sort an array of objects? Every sorting algorithm sorts elements by comparing them. For sorting objects, programmers have to pass the comparison function to the sort library function.</p> <pre><code>const arr = [{ marks: 10, name: \"John\"},\n             { marks: 4, name: \"Charles\"},\n             { marks: 8, name: \"Mike\"}, \n             { marks: 3, name: \"Hans\"}, \n             { marks: 9, name: \"Adam\"}, \n             { marks: 7, name: \"Sam\"},\n             { marks: 1, name: \"Ann\"}];\n\narr.sort((a, b) =&gt; a.marks - b.marks);\n\nconsole.log(arr);\n</code></pre> <p>In the preceding example, the array of a few students with their marks is sorted in increasing order. The custom comparison function passed to the <code>sort</code> function call specifies that two objects (<code>a</code> and <code>b</code>) shall be compared based on their <code>marks</code> property.</p> <p>The comparison function can be used for integers too. The JavaScript sort function documentation documents how to write the comparison function. Programmers have to check out the documentation of their own language sort function.</p>"},{"location":"programming/problem-solving-tools/#grid-traversal-delta","title":"Grid traversal delta","text":"<p>Many problems require traversing on a 2D grid. Traversing on a 2D grid is usually done by moving to any of the 4 adjacent cells of a cell. The following two arrays, called deltas, together encode the four possible movements in a compact format.</p> <pre><code>let dx = [0, 1, -1, 0];\nlet dy = [1, 0, 0, -1];\n</code></pre> <p>The first array <code>dx</code> encodes the possible changes in <code>x</code> direction and the array <code>dy</code> does the same for <code>y</code> direction. Adding any pair of them together (e.g., <code>dx[0], dy[0]</code>) to any given coordinate <code>(x, y)</code> gives a possible adjacent coordinate.</p> <p>The following loop checks all the 4 adjacent cells of the coordinate <code>(x, y)</code>. Without it, 4 different blocks would be necessary.</p> <pre><code>let x = 10, y = 12;\n\nfor (let i = 0; i &lt; 4; i++) {\n    let newX = x + dx[i]; // new x coordinate\n    let newY = y + dy[i]; // new y coordinate\n\n    // perform any necessary checks on (newX, newY)\n}\n</code></pre>"},{"location":"programming/programming-languages/","title":"Programming Languages","text":""},{"location":"programming/programming-languages/#control-structures","title":"Control structures","text":"<p>Usually statements in a program are executed sequentially, one line after another. There are, however, certain statements that can decide the next statement or block of statement to be executed. In other words, they can control the flow of a program. Such statements are collectively known as the control structures of a program.</p> <p>The common control structures of a programming language are conditionals (e.g., <code>if-else</code>, <code>switch</code>), loops (e.g., <code>for</code>, <code>while</code>, <code>do-while</code>), and exception handling (<code>try-catch</code>).</p>"}]}